# RustChat - 详细开发计划

> **项目概述**
> 基于Rust的现代化聊天软件，采用渐进式开发策略
> 
> **开发原则**
> - 功能驱动开发 (Feature-Driven Development)
> - 最小可行产品 (MVP) 优先
> - 跨平台支持：CLI → 桌面 → Web → 移动
> - 版本策略：0.x (实验) → 1.x (稳定) → 2.x+ (扩展)

---

## 🎯 M0 - "Hello World" 原型 (v0.1.0)

**里程碑目标：** 实现本机双终端基础聊天功能

### 📋 核心功能清单

#### 🔐 用户系统 (匿名模式)
- [x] **USER-001** 实现UUID用户标识生成
  - [x] 添加 `uuid` 依赖到 Cargo.toml
  - [x] 创建用户ID生成函数 `generate_user_id()`
  - [x] 服务器端返回UUID给新连接的客户端
  - **优先级:** P0 (最高)
  - **预估工时:** 2小时
  - **依赖:** 无

- [x] **USER-002** CLI用户ID本地存储
  - [x] 创建 `~/.rustchat/` 配置目录
  - [x] 实现ID文件读写功能 `load_user_id()` / `save_user_id()`
  - [x] 首次启动自动生成并保存ID
  - **优先级:** P0
  - **预估工时:** 3小时
  - **依赖:** USER-001

- [x] **USER-003** 昵称设置功能
  - [x] 实现 `/nick <nickname>` 命令解析
  - [x] 本地存储昵称到配置文件
  - [x] 发送昵称变更事件到服务器
  - [x] 添加昵称验证（长度、非法字符）
  - [x] 添加 `/whoami` 命令显示用户信息
  - [x] 服务器端昵称变更广播和数据库存储
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** USER-002
  - **状态:** ✅ 已完成

#### 💬 基础消息系统
- [x] **MSG-001** 消息数据结构定义
  - [x] 定义 `Message` 结构体 (id, from, body, timestamp)
  - [x] 实现JSON序列化/反序列化
  - [x] 添加消息类型枚举 (Text, System, NickChange)
  - **优先级:** P0
  - **预估工时:** 2小时
  - **依赖:** 无

- [x] **MSG-002** WebSocket服务器搭建
  - [x] 添加 `axum`, `tokio-tungstenite` 依赖
  - [x] 实现WebSocket升级处理 `/ws` 端点
  - [x] 创建连接管理器存储活跃连接
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** 无

- [x] **MSG-003** 消息广播机制
  - [x] 实现 `tokio::sync::broadcast` 全局消息通道
  - [x] 连接时订阅广播通道
  - [x] 实现消息转发到所有客户端
  - **优先级:** P0
  - **预估工时:** 3小时
  - **依赖:** MSG-001, MSG-002

#### 🔄 网络通信
- [x] **NET-001** 消息收发循环
  - [x] 实现异步消息接收循环 `message_receive_loop()`
  - [x] 实现异步消息发送任务 `message_send_task()`
  - [x] 添加消息解析和分发逻辑
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** MSG-003

- [x] **NET-002** 心跳保活机制
  - [x] 实现Ping/Pong消息处理
  - [x] 设置30秒心跳间隔（服务器端主动发送）
  - [x] 添加连接超时检测（60秒无响应自动断开）
  - [x] 客户端自动响应服务器心跳包
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** NET-001
  - **状态:** ✅ 已完成

- [x] **NET-003** 断线重连机制
  - [x] 检测WebSocket连接断开 `ConnectionClosed` 错误
  - [x] 实现指数退避重连策略（1s → 2s → 4s → ... → 30s）
  - [x] 最大重连次数限制（10次）
  - [x] 重连状态显示和用户反馈
  - [x] 连接会话管理和任务清理
  - [x] 用户输入异步处理（通过通道）
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** NET-002
  - **状态:** ✅ 已完成

#### 💾 数据持久化
- [x] **DATA-001** 本地消息历史
  - [x] 创建 SQLite 数据库结构
  - [x] CLI启动时加载最近100条消息
  - [x] 新消息同时显示并保存到数据库  
  - [x] 实现 `/history [n]` 命令查看历史消息
  - [x] 服务器端消息持久化集成
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** MSG-001
  - **状态:** ✅ 已完成

#### 🎮 命令系统
- [x] **CMD-001** 基础命令框架
  - [x] 实现命令解析器 `parse_command()`
  - [x] 定义命令枚举 (Help, Quit, Nick)
  - [x] 添加命令执行分发逻辑
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** 无

- [x] **CMD-002** 帮助命令实现
  - [x] `/help` 命令显示所有可用指令
  - [x] 格式化命令说明文档（带表格边框和分类）
  - [x] 添加使用示例和技巧说明
  - [x] 支持命令别名（/h, /help）
  - [x] 显示连接状态和重连信息
  - **优先级:** P1
  - **预估工时:** 1小时
  - **依赖:** CMD-001
  - **状态:** ✅ 已完成

- [x] **CMD-003** 退出命令实现
  - [x] `/quit` 命令优雅关闭WebSocket连接
  - [x] 清理资源并退出CLI程序
  - [x] 支持多个退出别名（/quit, /exit, /q）
  - [x] 用户友好的退出提示信息
  - **优先级:** P1
  - **预估工时:** 1小时
  - **依赖:** CMD-001
  - **状态:** ✅ 已完成

#### 🤖 Echo机器人
- [x] **BOT-001** Echo机器人核心
  - [x] 服务器启动时创建Echo机器人任务
  - [x] 检测 `@echo` 提及并回复
  - [x] 添加简单的文本处理逻辑（hello, time, help等特殊响应）
  - [x] 实现松耦合的机器人架构（Bot trait + BotManager）
  - [x] 支持机器人插件化设计
  - [x] 机器人消息自动保存到数据库
  - [x] 支持多个触发词（@echo, @回声）
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** MSG-003
  - **状态:** ✅ 已完成

#### 🎨 用户界面
- [x] **UI-001** CLI颜色主题
  - [x] 添加 `crossterm` 依赖用于终端样式
  - [x] 用户昵称显示不同颜色（基于用户名哈希分配）
  - [x] 时间戳显示为灰色
  - [x] Bot消息显示为绿色
  - [x] 系统消息显示为黄色
  - [x] 美观的欢迎Banner和分隔线
  - [x] 彩色的错误、成功、信息提示
  - [x] 彩色输入提示符
  - [x] 美观的帮助命令表格
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** CMD-001
  - **状态:** ✅ 已完成

#### 📦 部署配置
- [x] **DEPLOY-001** 构建和运行脚本
  - [x] 更新README添加详细构建说明
  - [x] 服务器启动：`cargo run --bin rustchatd`
  - [x] 客户端启动：`cargo run --bin rustchat-cli`
  - [x] 添加开发环境配置示例
  - [x] 多客户端测试指南
  - [x] 一键启动脚本（Windows PowerShell & Linux/macOS Bash）
  - [x] 故障排除和调试指南
  - [x] 项目结构详细说明
  - [x] 技术架构和依赖说明
  - **优先级:** P1
  - **预估工时:** 1小时
  - **依赖:** 所有其他任务
  - **状态:** ✅ 已完成

**M0总计预估工时:** 32小时
**M0实际完成时间:** 1-2周
**M0状态:** ✅ 全部完成！

🎉 **M0 里程碑达成！** 
- ✅ 基础聊天功能完整实现
- ✅ 数据持久化和用户管理
- ✅ 网络可靠性保障
- ✅ 结构化命令系统
- ✅ 机器人扩展框架
- ✅ 现代化终端UI
- ✅ 完整部署文档
- ✅ **数据库保存错误修复** (2025-06-14)

**重要修复 (2025-06-14):**
- 🐛 修复客户端数据库保存错误 "Failed to save message"
- 🔧 原因：消息ID主键冲突 (UNIQUE constraint failed)
- ✅ 解决：使用 `INSERT OR REPLACE` 替代 `INSERT`
- 📝 增加详细的调试日志输出
- ✅ 验证：消息发送、保存、历史显示均正常

**下一步：准备M1里程碑开发，建议集成CI/CD自动化！**

---

## 🚀 M1 - "社交基建" Alpha (v0.3.0)

**里程碑目标：** 群聊、权限管理、桌面GUI

### 📋 核心功能清单

#### 🏠 房间与群聊系统
- [x] **ROOM-001** 房间数据模型
  - [x] 定义 `Room` 结构体 (id, name, owner, created_at)
  - [x] 实现房间创建/删除/查询API
  - [x] 添加房间成员管理功能
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** 数据库设计

- [x] **ROOM-002** 房间REST API
  - [x] `POST /api/rooms` 创建房间
  - [x] `POST /api/rooms/:id/join` 加入房间
  - [x] `DELETE /api/rooms/:id/leave` 离开房间
  - [x] `GET /api/rooms` 获取用户房间列表
  - **优先级:** P0
  - **预估工时:** 5小时
  - **依赖:** ROOM-001

- [x] **ROOM-003** 分房间消息广播
  - [x] 修改广播机制支持房间隔离
  - [x] 实现 `DashMap<room_id, Vec<SocketTx>>` 连接管理
  - [x] 添加房间消息路由逻辑
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** ROOM-002

- [x] **ROOM-004** CLI房间命令 ✅
  - [x] `/create <room_name>` 创建房间
  - [x] `/join <room_id>` 加入房间
  - [x] `/rooms` 列出当前房间
  - [x] `/leave` 离开当前房间
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** ROOM-003

#### 👥 用户互动功能
- [ ] **INTERACT-001** @提及功能
  - [ ] 客户端正则检测 `@username` 并高亮显示
  - [ ] 服务器端标记被提及的消息 `mentioned: true`
  - [ ] 推送特殊通知给被提及用户
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** 用户系统

- [ ] **INTERACT-002** 未读消息计数
  - [ ] 实现客户端未读消息计数器
  - [ ] 提及消息显示红点提醒
  - [ ] 房间切换时更新未读状态
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** INTERACT-001

- [ ] **INTERACT-003** 输入状态指示
  - [ ] 实现 `TypingStart/TypingEnd` 事件
  - [ ] 500ms节流防止频繁发送
  - [ ] GUI显示 "用户正在输入..." 提示
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** 实时通信

#### 📚 消息历史管理
- [ ] **HISTORY-001** 服务器端消息存储
  - [ ] 设计消息数据库表结构
  - [ ] 实现消息持久化存储
  - [ ] 添加消息索引优化查询
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** 数据库设计

- [ ] **HISTORY-002** 分页历史查询
  - [ ] `GET /api/messages?room_id=<id>&before_id=<id>&limit=100`
  - [ ] WebSocket握手时支持 `?since_id=<id>` 参数
  - [ ] 客户端滚动加载历史消息
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** HISTORY-001

- [ ] **HISTORY-003** 消息编辑与撤回
  - [ ] `PUT /api/messages/:id` 编辑消息接口
  - [ ] 权限检查：仅发送者可编辑，2分钟内有效
  - [ ] WebSocket推送 `MessageUpdate/MessageDelete` 事件
  - [ ] GUI显示 "(已编辑)" 标签
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** HISTORY-002

#### 🔐 账户与安全系统
- [x] **AUTH-001** 用户注册登录 ✅ **DONE**
  - [x] `POST /api/auth/register` 邮箱+密码注册
  - [x] 使用 `argon2` 进行密码哈希
  - [x] 邮箱验证码发送(6位数字，10分钟有效)
  - [x] `POST /api/auth/login` 用户登录
  - [x] `POST /api/auth/verify-email` 邮箱验证
  - [x] `POST /api/auth/resend-code` 重发验证码
  - [x] `GET /api/auth/health` 认证服务健康检查
  - **优先级:** P0
  - **预估工时:** 5小时 ✅ **完成于 2025-06-14**
  - **依赖:** 邮件服务配置（暂时使用日志模拟）

- [ ] **AUTH-002** JWT令牌系统
  - [ ] `POST /api/auth/login` 返回Access+Refresh Token
  - [ ] `POST /api/auth/refresh` 刷新令牌
  - [ ] 实现令牌中间件验证
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** AUTH-001 ✅

- [ ] **AUTH-003** 会话管理
  - [ ] RefreshToken存储到SQLite `sessions` 表
  - [ ] 实现设备登录追踪
  - [ ] 支持强制下线指定设备
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** AUTH-002

- [ ] **AUTH-004** 基于角色的权限控制(RBAC)
  - [ ] 定义角色：owner/admin/member/guest
  - [ ] 实现权限中间件
  - [ ] 房间级别权限检查(发言/踢人/管理)
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** AUTH-003

#### 🖥️ 桌面GUI开发
- [ ] **GUI-001** Tauri+Svelte项目搭建
  - [ ] 初始化Tauri项目结构
  - [ ] 配置Svelte前端开发环境
  - [ ] 设置开发热重载和构建流程
  - **优先级:** P0
  - **预估工时:** 3小时
  - **依赖:** 无

- [ ] **GUI-002** 主界面布局设计
  - [ ] 侧栏：房间列表和导航
  - [ ] 主区域：消息显示和输入框
  - [ ] 右侧：用户列表和设置抽屉
  - **优先级:** P0
  - **预估工时:** 6小时
  - **依赖:** GUI-001

- [ ] **GUI-003** 设置页面开发
  - [ ] 用户头像上传(S3 presigned URL)
  - [ ] 昵称修改功能
  - [ ] 主题切换(明亮/黑暗模式)
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** GUI-002

- [ ] **GUI-004** Markdown与表情支持
  - [ ] 集成 `markdown-it` 渲染器
  - [ ] 支持基础Markdown语法
  - [ ] 添加Emoji选择器和渲染
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** GUI-003

#### 🔄 状态同步
- [ ] **SYNC-001** 已读状态同步
  - [ ] `POST /api/cursor` 更新已读游标
  - [ ] 跨设备同步已读状态
  - [ ] 消息列表显示已读标记
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** 多设备支持

- [ ] **SYNC-002** 草稿同步
  - [ ] localStorage存储本地草稿
  - [ ] WebSocket `Typing` 事件携带草稿内容
  - [ ] 设备间草稿状态同步
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** SYNC-001

#### 🤖 Bot与API扩展
- [ ] **API-001** Bot REST接口
  - [ ] `POST /api/bot/send` 发送消息接口
  - [ ] Token Scope限制到特定房间
  - [ ] Bot消息特殊标识和样式
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** AUTH系统

- [ ] **API-002** Webhook系统
  - [ ] 可配置的Webhook URL和事件掩码
  - [ ] 支持事件：join/message/leave
  - [ ] 失败重试机制(3次+指数退避)
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** API-001

**M1总计预估工时:** 75小时
**M1建议完成时间:** 4-6周

---

## 🌐 M2 - "跨屏无缝" Beta (v0.6.0)

**里程碑目标：** Web PWA、移动端原型、多媒体支持

### 📋 核心功能清单

#### 🌍 跨平台支持
- [ ] **WEB-001** Web PWA项目搭建
  - [ ] 复用Svelte组件到Vite项目
  - [ ] 配置 `vite-plugin-pwa`
  - [ ] 实现 `manifest.json` 和图标配置
  - **优先级:** P0
  - **预估工时:** 4小时
  - **依赖:** GUI开发完成

- [ ] **WEB-002** Service Worker离线支持
  - [ ] 缓存静态资源(/assets, /manifest.json)
  - [ ] IndexedDB存储消息(`messages_<room_id>` 表)
  - [ ] 离线状态检测和提示页面
  - **优先级:** P1
  - **预估工时:** 5小时
  - **依赖:** WEB-001

- [ ] **WEB-003** PWA安装体验
  - [ ] 添加安装提示横幅
  - [ ] 自定义安装按钮
  - [ ] 安装后启动画面设计
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** WEB-002

#### 📱 移动端开发
- [ ] **MOBILE-001** Flutter项目初始化
  - [ ] 创建Flutter项目结构
  - [ ] 配置 `flutter_rust_bridge`
  - [ ] 设置Rust FFI接口定义
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** 无

- [ ] **MOBILE-002** Rust核心逻辑绑定
  - [ ] FFI暴露 `connect/ws_url`, `send` 函数
  - [ ] 实现事件流 `Stream<Event>` 接口
  - [ ] 添加连接状态管理
  - **优先级:** P1
  - **预估工时:** 5小时
  - **依赖:** MOBILE-001

- [ ] **MOBILE-003** 基础UI页面
  - [ ] 登录页面(邮箱/密码输入)
  - [ ] 房间列表页面(滑动刷新)
  - [ ] 聊天页面(消息列表+输入框)
  - **优先级:** P1
  - **预估工时:** 6小时
  - **依赖:** MOBILE-002

- [ ] **MOBILE-004** 主题系统
  - [ ] 明亮主题配置
  - [ ] 黑暗主题配置
  - [ ] AMOLED纯黑主题
  - [ ] 主题切换动画效果
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** MOBILE-003

#### 🔔 推送通知系统
- [ ] **PUSH-001** 桌面端通知
  - [ ] 集成 `tauri-plugin-notification`
  - [ ] 新消息桌面通知弹窗
  - [ ] 通知点击跳转到对应房间
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** Tauri开发

- [ ] **PUSH-002** Web端通知
  - [ ] 实现 `Notification.requestPermission()`
  - [ ] Service Worker后台消息处理
  - [ ] 通知交互(点击回复)
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** WEB-002

- [ ] **PUSH-003** 移动端推送准备
  - [ ] 服务器端存储FCM/APNs token
  - [ ] 实现按设备推送消息
  - [ ] 推送消息模板和本地化
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** MOBILE-003

#### 📎 多媒体支持
- [ ] **MEDIA-001** 文件上传系统
  - [ ] S3兼容存储配置(MinIO/AWS S3)
  - [ ] Presigned URL生成接口
  - [ ] 文件大小限制(200MB)和类型检查
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** 对象存储服务

- [ ] **MEDIA-002** 文件消息类型
  - [ ] 定义 `FileMessage {url, mime, size, name}`
  - [ ] 图片消息预览和点击放大
  - [ ] 文件消息下载和打开
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** MEDIA-001

- [ ] **MEDIA-003** 语音留言功能
  - [ ] 录音功能(浏览器MediaRecorder API)
  - [ ] Opus格式编码和压缩
  - [ ] 语音消息播放控件
  - **优先级:** P2
  - **预估工时:** 5小时
  - **依赖:** MEDIA-002

#### 😊 表情包系统
- [ ] **EMOJI-001** 自定义表情数据模型
  - [ ] `emoji_pack` 表设计(pack_id, frames, creator)
  - [ ] 表情包上传和管理接口
  - [ ] 表情包权限控制(公开/私有)
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** 文件系统

- [ ] **EMOJI-002** CLI表情包管理
  - [ ] `/pack upload <zip_file>` 上传命令
  - [ ] `/pack list` 查看已安装表情包
  - [ ] 表情包格式验证和错误处理
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** EMOJI-001

- [ ] **EMOJI-003** GUI表情选择器
  - [ ] 表情面板UI设计
  - [ ] Sprite sheet缓存和渲染
  - [ ] 表情搜索和分类功能
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** EMOJI-002

#### 🔍 搜索与线程
- [ ] **SEARCH-001** 全文消息搜索
  - [ ] `POST /api/search` 搜索接口
  - [ ] SQLite FTS5全文索引
  - [ ] 搜索结果高亮显示
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** 数据库优化

- [ ] **THREAD-001** 消息回复线程
  - [ ] `Message { reply_to: Option<MessageId> }`
  - [ ] 内联线程展开/折叠
  - [ ] 侧边栏线程视图
  - **优先级:** P2
  - **预估工时:** 5小时
  - **依赖:** 消息系统重构

#### ✅ 已读回执系统
- [ ] **READ-001** 私聊已读状态
  - [ ] 双对勾显示(发送/已读)
  - [ ] 实时已读状态更新
  - [ ] 已读时间戳显示
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** 状态同步

- [ ] **READ-002** 群聊已读显示
  - [ ] 头像堆叠显示最近K个已读用户
  - [ ] 已读用户列表查看
  - [ ] 已读统计信息
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** READ-001

#### 🔧 Bot SDK开发
- [ ] **SDK-001** 多语言SDK核心
  - [ ] Rust trait `BotClient` 接口定义
  - [ ] `napi-rs` TypeScript绑定
  - [ ] SDK文档和使用示例
  - **优先级:** P2
  - **预估工时:** 5小时
  - **依赖:** Bot API完善

- [ ] **SDK-002** Python SDK
  - [ ] `maturin` 构建Python轮包
  - [ ] PyPI包发布流程
  - [ ] Python示例Bot项目
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** SDK-001

#### 🤖 内置机器人
- [ ] **BUILTIN-001** 天气机器人
  - [ ] `/weather <city>` 命令解析
  - [ ] OpenWeather API集成
  - [ ] 天气信息格式化显示
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** Bot框架

- [ ] **BUILTIN-002** GitHub集成机器人
  - [ ] `/gh <repo#issue>` 命令解析
  - [ ] GitHub REST API调用
  - [ ] Issue/PR信息卡片显示
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** BUILTIN-001

- [ ] **BUILTIN-003** 提醒机器人
  - [ ] `/remind <time> <message>` 时间解析
  - [ ] 基于Cron的定时任务队列
  - [ ] 提醒消息准时发送
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** 任务调度系统

**M2总计预估工时:** 96小时
**M2建议完成时间:** 6-8周

---

## 🔒 M3 - "专业协作" RC (v0.9.0)

**里程碑目标：** 端到端加密、音视频通话、多设备漫游

### 📋 核心功能清单

#### 🔐 端到端加密
- [ ] **E2EE-001** Double Ratchet实现
  - [ ] 集成Olm/Vodozemac加密库
  - [ ] X25519密钥交换协议
  - [ ] 每对用户独立加密会话
  - **优先级:** P0
  - **预估工时:** 8小时
  - **依赖:** 加密库调研

- [ ] **E2EE-002** 加密消息传输
  - [ ] `EncryptedPayload {header, ciphertext, mac}`
  - [ ] 消息加密/解密流程
  - [ ] 加密状态UI指示器
  - **优先级:** P0
  - **预估工时:** 6小时
  - **依赖:** E2EE-001

- [ ] **E2EE-003** 密钥备份恢复
  - [ ] Secret Storage密钥备份
  - [ ] 设备间密钥同步
  - [ ] 密钥恢复向导
  - **优先级:** P1
  - **预估工时:** 5小时
  - **依赖:** E2EE-002

#### 📱 设备管理
- [ ] **DEVICE-001** 设备注册追踪
  - [ ] 设备指纹生成(UA+IP+时间)
  - [ ] 设备列表管理接口
  - [ ] 新设备登录通知
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** 认证系统

- [ ] **DEVICE-002** 设备管理界面
  - [ ] `/devices` 命令列出所有设备
  - [ ] 显示设备类型、IP、最后活跃时间
  - [ ] `DELETE /devices/:id` 强制下线设备
  - **优先级:** P1
  - **预估工时:** 2小时
  - **依赖:** DEVICE-001

#### 📞 实时音视频
- [ ] **RTC-001** WebRTC信令服务器
  - [ ] SDP offer/answer交换
  - [ ] ICE candidate收集和中继
  - [ ] 通话状态管理
  - **优先级:** P1
  - **预估工时:** 6小时
  - **依赖:** 无

- [ ] **RTC-002** 信令消息协议
  - [ ] `CallOffer {sdp, audio, video}` 事件
  - [ ] `CallAnswer {sdp}` 响应事件  
  - [ ] `ICECandidate` 网络候选事件
  - [ ] 通话挂断和拒绝处理
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** RTC-001

- [ ] **RTC-003** TURN服务器部署
  - [ ] Docker Compose配置coturn
  - [ ] TURN服务器密钥管理
  - [ ] NAT类型检测和指示
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** 基础设施

- [ ] **RTC-004** 自适应码率控制
  - [ ] RTT和丢包率统计
  - [ ] Opus码率动态调整
  - [ ] 网络质量指示器
  - **优先级:** P2
  - **预估工时:** 4小时
  - **依赖:** RTC-002

#### 🔄 多设备同步
- [ ] **SYNC-003** 草稿状态同步
  - [ ] `PATCH /api/draft` 草稿更新接口
  - [ ] 实时草稿状态广播
  - [ ] 设备间草稿冲突解决
  - **优先级:** P1
  - **预估工时:** 3小时
  - **依赖:** 状态管理

- [ ] **SYNC-004** 滚动位置同步
  - [ ] 阅读位置状态存储
  - [ ] 跨设备滚动位置恢复
  - [ ] 智能滚动位置合并
  - **优先级:** P2
  - **预估工时:** 2小时
  - **依赖:** SYNC-003

- [ ] **SYNC-005** 消息历史漫游
  - [ ] `/api/history?room=<id>&before_ts=<n>&limit=200`
  - [ ] 客户端时间线合并算法
  - [ ] 增量同步优化
  - **优先级:** P1
  - **预估工时:** 4小时
  - **依赖:** 历史消息系统

#### 💬 高级聊天功能
- [ ] **ADVANCED-001** 消息表情回应
  - [ ] `MessageReaction {msg_id, emoji, user_id}`
  - [ ] 表情回应添加/移除接口
  - [ ] 表情统计和用户列表显示
  - **优先级:** P2
  - **预估工时:** 3小时
  - **依赖:** 表情系统

- [ ] **ADVANCED-002** 投票系统
  - [ ] `/poll "问题" "选项A" "选项B"` 命令
  - [ ] 投票消息类型和渲染
  - [ ] 投票结果可视化进度条
  - [ ] 投票结束和统计功能
  - **优先级:** P2
  - **预估工时:** 5小时
  - **依赖:** 命令系统扩展

**M3总计预估工时:** 58小时
**M3建议完成时间:** 4-5周

---

## 🎯 M4 - "正式版本" (v1.0.0)

**里程碑目标：** 企业级功能、插件生态、协同办公

### 📋 核心功能清单

#### 🏢 企业级聊天
- [ ] **ENTERPRISE-001** 分级频道系统
  - [ ] Space → Channel两层路由架构
  - [ ] 频道权限继承和覆盖
  - [ ] 频道分类和排序功能
  - **优先级:** P1
  - **预估工时:** 6小时

- [ ] **ENTERPRISE-002** 直播弹幕模式
  - [ ] UDP/WebSocket弹幕子协议
  - [ ] 高并发消息处理(10k msg/s)
  - [ ] 弹幕限流和防刷机制
  - **优先级:** P2
  - **预估工时:** 8小时

- [ ] **ENTERPRISE-003** 语音频道
  - [ ] 常驻WebRTC轻量流
  - [ ] Opus 24kbps低码率优化
  - [ ] 语音频道用户状态管理
  - **优先级:** P1
  - **预估工时:** 7小时

#### 📝 协同办公
- [ ] **COLLAB-001** CRDT协同编辑
  - [ ] 集成rust-crdt库
  - [ ] Markdown文档房间类型
  - [ ] Y-sync协议适配
  - **优先级:** P2
  - **预估工时:** 10小时

- [ ] **COLLAB-002** 屏幕共享
  - [ ] Electron DesktopCapturer (桌面)
  - [ ] getDisplayMedia API (Web)
  - [ ] 屏幕共享流路由到房间
  - **优先级:** P2
  - **预估工时:** 6小时

- [ ] **COLLAB-003** 会议模式
  - [ ] 排麦列表和发言控制
  - [ ] 会议计时器和议程
  - [ ] 云录制合流功能
  - **优先级:** P2
  - **预估工时:** 8小时

#### 🔌 插件生态系统
- [ ] **PLUGIN-001** WASI插件沙箱
  - [ ] wasmtime运行时集成
  - [ ] 文件系统和网络白名单
  - [ ] 插件资源限制和监控
  - **优先级:** P1
  - **预估工时:** 12小时

- [ ] **PLUGIN-002** 插件清单系统
  - [ ] rustchat-plugin.toml权限声明
  - [ ] 插件生命周期管理
  - [ ] 插件间通信协议
  - **优先级:** P1
  - **预估工时:** 6小时

- [ ] **PLUGIN-003** 插件商店前端
  - [ ] 插件搜索和分类浏览
  - [ ] 一键安装和热重载
  - [ ] 插件评价和反馈系统
  - **优先级:** P1
  - **预估工时:** 8小时

- [ ] **PLUGIN-004** 付费插件支持
  - [ ] Stripe支付集成
  - [ ] License Key生成和验证
  - [ ] 付费插件使用统计
  - **优先级:** P2
  - **预估工时:** 6小时

#### 🏗️ 平台架构
- [ ] **PLATFORM-001** API网关
  - [ ] REST/GraphQL/gRPC统一入口
  - [ ] 认证中间件共享
  - [ ] API版本管理和兼容性
  - **优先级:** P1
  - **预估工时:** 8小时

- [ ] **PLATFORM-002** 多租户支持
  - [ ] org_id字段添加到数据模型
  - [ ] Postgres行级安全策略
  - [ ] 租户隔离和资源配额
  - **优先级:** P1
  - **预估工时:** 10小时

- [ ] **PLATFORM-003** 监控和运维
  - [ ] Prometheus指标导出
  - [ ] Grafana仪表板配置
  - [ ] 自动化运维脚本
  - **优先级:** P1
  - **预估工时:** 6小时

- [ ] **PLATFORM-004** 自动扩容
  - [ ] SLA监控(latency_p99 > 500ms)
  - [ ] Kubernetes HPA配置
  - [ ] 负载均衡和故障转移
  - **优先级:** P2
  - **预估工时:** 8小时

**M4总计预估工时:** 109小时
**M4建议完成时间:** 8-10周

---

## 🚀 M5 - "黑科技探索" (v2.x+)

**里程碑目标：** 前沿技术验证、差异化创新

### 📋 探索性功能

#### 🤖 AI智能助手
- [ ] **AI-001** GPT上下文摘要
  - [ ] 聊天记录智能摘要
  - [ ] 长对话关键信息提取
  - [ ] 多语言智能翻译
  - **优先级:** P3
  - **预估工时:** 15小时

- [ ] **AI-002** 多模态AI功能  
  - [ ] 图片转代码/OCR识别
  - [ ] 语音实时转文字(Whisper-rs)
  - [ ] 智能回复建议
  - **优先级:** P3
  - **预估工时:** 20小时

#### 🌐 极端网络环境
- [ ] **NETWORK-001** QUIC P2P通信
  - [ ] QUIC协议NAT穿透
  - [ ] P2P直连优化
  - [ ] 网络质量自适应
  - **优先级:** P3
  - **预估工时:** 25小时

- [ ] **NETWORK-002** 离线容错通信
  - [ ] DTN Bundle离线队列
  - [ ] Wi-Fi Direct Mesh群聊
  - [ ] 离线消息同步策略
  - **优先级:** P3
  - **预估工时:** 30小时

#### 🔒 隐私与零知识
- [ ] **PRIVACY-001** 零知识证明
  - [ ] 群成员零知识名单
  - [ ] 隐私计算统计
  - [ ] 匿名投票系统
  - **优先级:** P3
  - **预估工时:** 35小时

- [ ] **PRIVACY-002** 高级隐私保护
  - [ ] Proof-of-Erase可证明删除
  - [ ] 防截屏水印技术
  - [ ] 阅后即焚消息
  - **优先级:** P3
  - **预估工时:** 20小时

#### 🎨 未来用户界面
- [ ] **UI-FUTURE-001** 无界面集成
  - [ ] HTML/Canvas Panel沙盒
  - [ ] 小程序运行环境
  - [ ] 自定义UI组件系统
  - **优先级:** P3
  - **预估工时:** 25小时

- [ ] **UI-FUTURE-002** 沉浸式体验
  - [ ] WebXR 3D聊天室
  - [ ] VR/AR界面适配
  - [ ] 手势和语音交互
  - **优先级:** P3
  - **预估工时:** 40小时

**M5为探索性开发，工时预估仅供参考**

---

## 📅 总体开发计划

| 里程碑 | 版本 | 预估工时 | 建议时间 | 核心目标 |
|--------|------|----------|----------|----------|
| M0 | v0.1.0 | 32小时 | 1-2周 | 基础聊天原型 |
| M1 | v0.3.0 | 75小时 | 4-6周 | 社交基建 |
| M2 | v0.6.0 | 96小时 | 6-8周 | 跨平台支持 |
| M3 | v0.9.0 | 58小时 | 4-5周 | 专业协作 |
| M4 | v1.0.0 | 109小时 | 8-10周 | 正式发布 |
| M5 | v2.x+ | 探索性 | 持续 | 前沿技术 |

**总计开发工时:** 约370小时  
**预计开发周期:** 6-8个月

## 🎯 开发建议

### 优先级说明
- **P0 (关键):** 必须完成，影响核心功能
- **P1 (重要):** 应该完成，影响用户体验
- **P2 (一般):** 可以完成，增强功能性
- **P3 (探索):** 实验性功能，长期规划

### 开发策略
1. **MVP优先:** 先实现核心聊天功能，再扩展高级特性
2. **增量迭代:** 每个里程碑都是可用的产品版本
3. **跨端渐进:** 桌面端 → Web端 → 移动端的顺序开发
4. **社区驱动:** 尽早开放Bot API和插件接口
5. **安全第一:** 在功能扩展前确保安全性和隐私保护

### 技术栈建议
- **后端:** Rust + Axum + SQLite/PostgreSQL
- **桌面端:** Tauri + Svelte
- **Web端:** Vite + Svelte + PWA
- **移动端:** Flutter + rust_bridge
- **部署:** Docker + Kubernetes
- **监控:** Prometheus + Grafana

这个详细的todo列表将帮助您系统性地开发RustChat项目。建议按照里程碑顺序逐步实施，每完成一个功能点就及时测试和验证。
